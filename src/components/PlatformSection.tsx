'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Target, Users, Cog, Globe, ChevronRight, ChevronLeft, BookOpen, Star, Award, Lightbulb } from 'lucide-react'

interface Task {
  id: string
  title: string
  description: string
  details: string[]
  icon: string
  color: string
}

interface Characteristic {
  id: string
  title: string
  description: string
  examples: string[]
  icon: string
  color: string
}

const nationalDemocraticTasks: Task[] = [
  {
    id: 'overthrow-imperialism',
    title: 'ƒê√°nh ƒë·ªï ƒë·∫ø qu·ªëc Ph√°p v√† phong ki·∫øn Vi·ªát Nam',
    description: 'Gi·∫£i ph√≥ng d√¢n t·ªôc kh·ªèi √°ch th·ªëng tr·ªã c·ªßa th·ª±c d√¢n v√† phong ki·∫øn',
    details: [
      'ƒê·∫•u tranh ch·ªëng th·ª±c d√¢n Ph√°p',
      'X√≥a b·ªè ch·∫ø ƒë·ªô phong ki·∫øn l·∫°c h·∫≠u',
      'Gi√†nh l·∫°i ch·ªß quy·ªÅn d√¢n t·ªôc',
      'Th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc'
    ],
    icon: '‚öîÔ∏è',
    color: 'from-red-500 to-red-700'
  },
  {
    id: 'independence',
    title: 'L√†m cho n∆∞·ªõc Vi·ªát Nam ho√†n to√†n ƒë·ªôc l·∫≠p',
    description: 'X√¢y d·ª±ng m·ªôt n∆∞·ªõc Vi·ªát Nam ƒë·ªôc l·∫≠p, t·ª± ch·ªß ho√†n to√†n',
    details: [
      'ƒê·ªôc l·∫≠p v·ªÅ ch√≠nh tr·ªã',
      'T·ª± ch·ªß v·ªÅ kinh t·∫ø',
      'Ch·ªß quy·ªÅn v·ªÅ l√£nh th·ªï',
      'B√¨nh ƒë·∫≥ng trong quan h·ªá qu·ªëc t·∫ø'
    ],
    icon: 'üèõÔ∏è',
    color: 'from-blue-500 to-blue-700'
  },
  {
    id: 'worker-peasant-government',
    title: 'Th√†nh l·∫≠p ch√≠nh ph·ªß c√¥ng n√¥ng binh',
    description: 'X√¢y d·ª±ng ch√≠nh quy·ªÅn c·ªßa nh√¢n d√¢n, do nh√¢n d√¢n, v√¨ nh√¢n d√¢n',
    details: [
      'Quy·ªÅn l·ª±c thu·ªôc v·ªÅ nh√¢n d√¢n lao ƒë·ªông',
      'C√¥ng nh√¢n l√†m ch·ªß',
      'N√¥ng d√¢n ƒë∆∞·ª£c gi·∫£i ph√≥ng',
      'Binh sƒ© c√≥ quy·ªÅn d√¢n ch·ªß'
    ],
    icon: 'üë•',
    color: 'from-green-500 to-green-700'
  },
  {
    id: 'land-reform',
    title: 'T·ªãch thu ru·ªông ƒë·∫•t ph√¢n ph·ªëi cho n√¥ng d√¢n',
    description: 'Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ ru·ªông ƒë·∫•t, gi·∫£i ph√≥ng n√¥ng d√¢n',
    details: [
      'T·ªãch thu ru·ªông ƒë·∫•t c·ªßa ƒë·∫ø qu·ªëc',
      'T·ªãch thu ru·ªông ƒë·∫•t c·ªßa phong ki·∫øn',
      'Ph√¢n ph·ªëi cho n√¥ng d√¢n ngh√®o',
      'X√≥a b·ªè ch·∫ø ƒë·ªô b√≥c l·ªôt n√¥ng nghi·ªáp'
    ],
    icon: 'üåæ',
    color: 'from-yellow-500 to-yellow-700'
  }
]

const socialistTasks: Task[] = [
  {
    id: 'collectivization',
    title: 'T·ªãch thu m√°y m√≥c, ru·ªông ƒë·∫•t c·ªßa t∆∞ b·∫£n gia',
    description: 'Chuy·ªÉn ƒë·ªïi s·ªü h·ªØu t∆∞ nh√¢n th√†nh s·ªü h·ªØu c√¥ng h·ªØu',
    details: [
      'Qu·ªëc h·ªØu h√≥a c√°c ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t',
      'X√≥a b·ªè ch·∫ø ƒë·ªô b√≥c l·ªôt',
      'Ph√°t tri·ªÉn kinh t·∫ø t·∫≠p th·ªÉ',
      'X√¢y d·ª±ng n·ªÅn kinh t·∫ø x√£ h·ªôi ch·ªß nghƒ©a'
    ],
    icon: 'üè≠',
    color: 'from-purple-500 to-purple-700'
  },
  {
    id: 'distribution-principle',
    title: 'Th·ª±c hi·ªán "c√°c t·∫≠n k·ª≥ nƒÉng, ph√¢n t·∫≠n k·ª≥ d·ª•ng"',
    description: 'Nguy√™n t·∫Øc ph√¢n ph·ªëi theo lao ƒë·ªông trong x√£ h·ªôi x√£ h·ªôi ch·ªß nghƒ©a',
    details: [
      'M·ªói ng∆∞·ªùi ƒë√≥ng g√≥p theo kh·∫£ nƒÉng',
      'M·ªói ng∆∞·ªùi h∆∞·ªüng th·ª• theo lao ƒë·ªông',
      'X√≥a b·ªè b·∫•t b√¨nh ƒë·∫≥ng x√£ h·ªôi',
      'Ph√°t tri·ªÉn con ng∆∞·ªùi to√†n di·ªán'
    ],
    icon: '‚öñÔ∏è',
    color: 'from-indigo-500 to-indigo-700'
  },
  {
    id: 'abolish-private-property',
    title: 'B√£i b·ªè t∆∞ h·ªØu t∆∞ s·∫£n, th·ª±c hi·ªán c√¥ng h·ªØu',
    description: 'X√¢y d·ª±ng ch·∫ø ƒë·ªô s·ªü h·ªØu c√¥ng h·ªØu v·ªÅ ph∆∞∆°ng ti·ªán s·∫£n xu·∫•t',
    details: [
      'X√≥a b·ªè s·ªü h·ªØu t∆∞ nh√¢n t∆∞ b·∫£n ch·ªß nghƒ©a',
      'Ph√°t tri·ªÉn s·ªü h·ªØu to√†n d√¢n',
      'X√¢y d·ª±ng s·ªü h·ªØu t·∫≠p th·ªÉ',
      'ƒê·∫£m b·∫£o l·ª£i √≠ch chung c·ªßa x√£ h·ªôi'
    ],
    icon: 'ü§ù',
    color: 'from-teal-500 to-teal-700'
  }
]

const platformCharacteristics: Characteristic[] = [
  {
    id: 'scientific',
    title: 'T√≠nh khoa h·ªçc',
    description: 'V·∫≠n d·ª•ng s√°ng t·∫°o ch·ªß nghƒ©a M√°c-L√™nin v√†o ƒëi·ªÅu ki·ªán Vi·ªát Nam',
    examples: [
      'X√°c ƒë·ªãnh ƒë√∫ng t√≠nh ch·∫•t c√°ch m·∫°ng',
      'ƒê·ªÅ ra nhi·ªám v·ª• ph√π h·ª£p quy lu·∫≠t',
      'D·ª±a tr√™n c∆° s·ªü l√Ω lu·∫≠n v·ªØng ch·∫Øc',
      'Ph√¢n t√≠ch ƒë√∫ng th·ª±c t·∫ø x√£ h·ªôi'
    ],
    icon: 'üî¨',
    color: 'from-blue-500 to-blue-700'
  },
  {
    id: 'national',
    title: 'T√≠nh d√¢n t·ªôc',
    description: 'Ph·∫£n √°nh nguy·ªán v·ªçng v√† l·ª£i √≠ch c·ªßa nh√¢n d√¢n Vi·ªát Nam',
    examples: [
      'K·∫ø th·ª´a truy·ªÅn th·ªëng y√™u n∆∞·ªõc',
      'Ph√π h·ª£p ƒëi·ªÅu ki·ªán kinh t·∫ø-x√£ h·ªôi',
      'Th·ªÉ hi·ªán ƒë·∫∑c s·∫Øc vƒÉn h√≥a d√¢n t·ªôc',
      'ƒê√°p ·ª©ng nguy·ªán v·ªçng nh√¢n d√¢n'
    ],
    icon: 'üèÆ',
    color: 'from-red-500 to-red-700'
  },
  {
    id: 'contemporary',
    title: 'T√≠nh th·ªùi ƒë·∫°i',
    description: 'G·∫Øn c√°ch m·∫°ng Vi·ªát Nam v·ªõi phong tr√†o c√°ch m·∫°ng th·∫ø gi·ªõi',
    examples: [
      'Ph√π h·ª£p xu th·∫ø th·ªùi ƒë·∫°i m·ªõi',
      'K·∫øt h·ª£p v·ªõi c√°ch m·∫°ng th·∫ø gi·ªõi',
      'Th·ªÉ hi·ªán tinh th·∫ßn qu·ªëc t·∫ø',
      'H∆∞·ªõng t·ªõi t∆∞∆°ng lai ti·∫øn b·ªô'
    ],
    icon: 'üåç',
    color: 'from-green-500 to-green-700'
  }
]

interface PlatformSectionProps {
  onNext: () => void
  onBack: () => void
  onGoToDashboard?: () => void
}

export default function PlatformSection({ onNext, onBack, onGoToDashboard }: PlatformSectionProps) {
  const [currentStep, setCurrentStep] = useState(0)
  const [selectedTask, setSelectedTask] = useState<string | null>(null)
  const [selectedCharacteristic, setSelectedCharacteristic] = useState<string | null>(null)

  const steps = [
    'Nhi·ªám v·ª• d√¢n t·ªôc d√¢n ch·ªß',
    'Nhi·ªám v·ª• x√£ h·ªôi ch·ªß nghƒ©a',
    'ƒê·∫∑c ƒëi·ªÉm C∆∞∆°ng lƒ©nh',
    '√ù nghƒ©a l·ªãch s·ª≠'
  ]

  const renderNationalDemocraticTasks = () => (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold text-white mb-4">Nhi·ªám v·ª• c√°ch m·∫°ng d√¢n t·ªôc d√¢n ch·ªß</h2>
        <p className="text-gray-300 text-lg">
          Gi·∫£i ph√≥ng d√¢n t·ªôc, x√¢y d·ª±ng ch·∫ø ƒë·ªô d√¢n ch·ªß nh√¢n d√¢n
        </p>
      </motion.div>

      <div className="grid md:grid-cols-2 gap-6">
        {nationalDemocraticTasks.map((task, index) => (
          <motion.div
            key={task.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.2 }}
            className={`bg-gradient-to-br ${task.color} rounded-xl p-6 cursor-pointer transform hover:scale-105 transition-all duration-300 ${
              selectedTask === task.id ? 'ring-4 ring-white' : ''
            }`}
            onClick={() => setSelectedTask(selectedTask === task.id ? null : task.id)}
          >
            <div className="text-4xl mb-4">{task.icon}</div>
            <h3 className="text-xl font-bold text-white mb-2">{task.title}</h3>
            <p className="text-gray-200 text-sm mb-4">{task.description}</p>
            
            <AnimatePresence>
              {selectedTask === task.id && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="mt-4 space-y-2"
                >
                  {task.details.map((detail, idx) => (
                    <motion.div
                      key={idx}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: idx * 0.1 }}
                      className="flex items-center text-white text-sm"
                    >
                      <ChevronRight className="w-4 h-4 mr-2" />
                      {detail}
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        className="bg-gradient-to-r from-orange-500 to-orange-700 rounded-xl p-6 mt-8"
      >
        <h3 className="text-xl font-bold text-white mb-4 flex items-center">
          <Target className="w-5 h-5 mr-2" />
          C√°c nhi·ªám v·ª• kh√°c
        </h3>
        <div className="grid md:grid-cols-2 gap-4">
          <div className="bg-black bg-opacity-20 rounded-lg p-4">
            <p className="text-white">‚Ä¢ Th·ª±c hi·ªán 8 ti·∫øng l√†m vi·ªác</p>
          </div>
          <div className="bg-black bg-opacity-20 rounded-lg p-4">
            <p className="text-white">‚Ä¢ B√£i b·ªè c√°c th·ª© thu·∫ø kh·ªï sai, c√¥ng ƒë·∫ßu</p>
          </div>
          <div className="bg-black bg-opacity-20 rounded-lg p-4">
            <p className="text-white">‚Ä¢ Th·ª±c hi·ªán quy·ªÅn t·ª± do d√¢n ch·ªß</p>
          </div>
          <div className="bg-black bg-opacity-20 rounded-lg p-4">
            <p className="text-white">‚Ä¢ Th·ª±c hi·ªán gi√°o d·ª•c ph·ªï th√¥ng</p>
          </div>
        </div>
      </motion.div>
    </div>
  )

  const renderSocialistTasks = () => (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold text-white mb-4">Nhi·ªám v·ª• c√°ch m·∫°ng x√£ h·ªôi ch·ªß nghƒ©a</h2>
        <p className="text-gray-300 text-lg">
          X√¢y d·ª±ng ch·∫ø ƒë·ªô x√£ h·ªôi ch·ªß nghƒ©a, x√≥a b·ªè b√≥c l·ªôt
        </p>
      </motion.div>

      <div className="space-y-6">
        {socialistTasks.map((task, index) => (
          <motion.div
            key={task.id}
            initial={{ opacity: 0, x: index % 2 === 0 ? -50 : 50 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.3 }}
            className={`bg-gradient-to-r ${task.color} rounded-xl p-6 cursor-pointer transform hover:scale-105 transition-all duration-300 ${
              selectedTask === task.id ? 'ring-4 ring-white' : ''
            }`}
            onClick={() => setSelectedTask(selectedTask === task.id ? null : task.id)}
          >
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center mb-4">
                  <div className="text-4xl mr-4">{task.icon}</div>
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-2">{task.title}</h3>
                    <p className="text-gray-200">{task.description}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <AnimatePresence>
              {selectedTask === task.id && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="mt-4 grid md:grid-cols-2 gap-4"
                >
                  {task.details.map((detail, idx) => (
                    <motion.div
                      key={idx}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: idx * 0.1 }}
                      className="bg-black bg-opacity-20 rounded-lg p-3"
                    >
                      <p className="text-white text-sm">{detail}</p>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>
    </div>
  )

  const renderPlatformCharacteristics = () => (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold text-white mb-4">ƒê·∫∑c ƒëi·ªÉm c·ªßa C∆∞∆°ng lƒ©nh</h2>
        <p className="text-gray-300 text-lg">
          Ba ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t c·ªßa C∆∞∆°ng lƒ©nh ch√≠nh tr·ªã ƒë·∫ßu ti√™n
        </p>
      </motion.div>

      <div className="grid md:grid-cols-3 gap-6">
        {platformCharacteristics.map((characteristic, index) => (
          <motion.div
            key={characteristic.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.2 }}
            className={`bg-gradient-to-br ${characteristic.color} rounded-xl p-6 cursor-pointer transform hover:scale-105 transition-all duration-300 ${
              selectedCharacteristic === characteristic.id ? 'ring-4 ring-white' : ''
            }`}
            onClick={() => setSelectedCharacteristic(selectedCharacteristic === characteristic.id ? null : characteristic.id)}
          >
            <div className="text-4xl mb-4">{characteristic.icon}</div>
            <h3 className="text-xl font-bold text-white mb-2">{characteristic.title}</h3>
            <p className="text-gray-200 text-sm mb-4">{characteristic.description}</p>
            
            <AnimatePresence>
              {selectedCharacteristic === characteristic.id && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="mt-4 space-y-2"
                >
                  {characteristic.examples.map((example, idx) => (
                    <motion.div
                      key={idx}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: idx * 0.1 }}
                      className="flex items-center text-white text-sm"
                    >
                      <Star className="w-4 h-4 mr-2" />
                      {example}
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>
    </div>
  )

  const renderHistoricalSignificance = () => (
    <div className="space-y-6">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold text-white mb-4">√ù nghƒ©a l·ªãch s·ª≠ c·ªßa C∆∞∆°ng lƒ©nh</h2>
        <p className="text-gray-300 text-lg">
          T·∫ßm quan tr·ªçng v√† gi√° tr·ªã l·ªãch s·ª≠ c·ªßa C∆∞∆°ng lƒ©nh ch√≠nh tr·ªã ƒë·∫ßu ti√™n
        </p>
      </motion.div>

      <div className="grid md:grid-cols-2 gap-6">
        {[
          {
            title: 'L·∫ßn ƒë·∫ßu ti√™n c√≥ c∆∞∆°ng lƒ©nh khoa h·ªçc',
            description: 'Vi·ªát Nam c√≥ m·ªôt c∆∞∆°ng lƒ©nh c√°ch m·∫°ng ƒë√∫ng ƒë·∫Øn, khoa h·ªçc',
            icon: 'üìö',
            color: 'from-blue-500 to-blue-700'
          },
          {
            title: 'X√°c ƒë·ªãnh con ƒë∆∞·ªùng c√°ch m·∫°ng',
            description: 'X√°c ƒë·ªãnh r√µ con ƒë∆∞·ªùng c√°ch m·∫°ng v√¥ s·∫£n cho Vi·ªát Nam',
            icon: 'üõ§Ô∏è',
            color: 'from-green-500 to-green-700'
          },
          {
            title: 'ƒê·∫∑t n·ªÅn m√≥ng t∆∞ t∆∞·ªüng',
            description: 'ƒê·∫∑t n·ªÅn m√≥ng t∆∞ t∆∞·ªüng cho to√†n b·ªô ho·∫°t ƒë·ªông c·ªßa ƒê·∫£ng',
            icon: 'üèóÔ∏è',
            color: 'from-purple-500 to-purple-700'
          },
          {
            title: 'ƒê·ªãnh h∆∞·ªõng c√°ch m·∫°ng',
            description: 'ƒê·ªãnh h∆∞·ªõng cho phong tr√†o c√°ch m·∫°ng Vi·ªát Nam su·ªët th·∫ø k·ª∑ XX',
            icon: 'üß≠',
            color: 'from-red-500 to-red-700'
          }
        ].map((item, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.2 }}
            className={`bg-gradient-to-br ${item.color} rounded-xl p-6`}
          >
            <div className="text-4xl mb-4">{item.icon}</div>
            <h3 className="text-xl font-bold text-white mb-2">{item.title}</h3>
            <p className="text-gray-200">{item.description}</p>
          </motion.div>
        ))}
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        className="bg-gradient-to-r from-yellow-500 to-yellow-700 rounded-xl p-8 mt-8"
      >
        <div className="text-center">
          <div className="text-4xl mb-4">üéØ</div>
          <h3 className="text-2xl font-bold text-white mb-4">K·∫øt lu·∫≠n</h3>
          <p className="text-white text-lg">
            C∆∞∆°ng lƒ©nh ch√≠nh tr·ªã ƒë·∫ßu ti√™n c·ªßa ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam (th√°ng 2/1930) l√† m·ªôt vƒÉn ki·ªán 
            l·ªãch s·ª≠ c√≥ √Ω nghƒ©a v√¥ c√πng to l·ªõn, ƒë√°nh d·∫•u b∆∞·ªõc ngo·∫∑t v·ªÅ t∆∞ duy c√°ch m·∫°ng, 
            m·ªü ra k·ª∑ nguy√™n m·ªõi cho c√°ch m·∫°ng Vi·ªát Nam.
          </p>
        </div>
      </motion.div>
    </div>
  )

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 0:
        return renderNationalDemocraticTasks()
      case 1:
        return renderSocialistTasks()
      case 2:
        return renderPlatformCharacteristics()
      case 3:
        return renderHistoricalSignificance()
      default:
        return renderNationalDemocraticTasks()
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-4">
            C∆∞∆°ng lƒ©nh ch√≠nh tr·ªã ƒë·∫ßu ti√™n c·ªßa ƒê·∫£ng
          </h1>
          <p className="text-gray-300 text-xl">
            VƒÉn ki·ªán l·ªãch s·ª≠ ƒë·ªãnh h∆∞·ªõng c√°ch m·∫°ng Vi·ªát Nam (2/1930)
          </p>
        </motion.div>

        {/* Progress Steps */}
        <div className="flex justify-center mb-8">
          <div className="flex space-x-4 bg-black bg-opacity-30 rounded-full p-2">
            {steps.map((step, index) => (
              <button
                key={index}
                onClick={() => setCurrentStep(index)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                  currentStep === index
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-300 hover:text-white hover:bg-gray-700'
                }`}
              >
                {step}
              </button>
            ))}
          </div>
        </div>

        {/* Content */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentStep}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.3 }}
          >
            {renderCurrentStep()}
          </motion.div>
        </AnimatePresence>

        {/* Navigation */}
        <div className="flex justify-between items-center mt-12">
          <div className="flex items-center space-x-4">
            <button
              onClick={onBack}
              className="flex items-center px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors duration-300"
            >
              <ChevronLeft className="w-5 h-5 mr-2" />
              Quay l·∫°i
            </button>
            
            {onGoToDashboard && (
              <button
                onClick={onGoToDashboard}
                className="flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-300"
              >
                üìä B·∫£ng ƒëi·ªÅu khi·ªÉn
              </button>
            )}
          </div>

          <div className="flex space-x-4">
            <button
              onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}
              disabled={currentStep === 0}
              className="px-6 py-3 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 disabled:opacity-50 text-white rounded-lg transition-colors duration-300"
            >
              B∆∞·ªõc tr∆∞·ªõc
            </button>
            
            {currentStep < steps.length - 1 ? (
              <button
                onClick={() => setCurrentStep(Math.min(steps.length - 1, currentStep + 1))}
                className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-300"
              >
                B∆∞·ªõc ti·∫øp
              </button>
            ) : (
              <button
                onClick={onNext}
                className="flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-300"
              >
                Ti·∫øp t·ª•c
                <ChevronRight className="w-5 h-5 ml-2" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}