'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface PrincipleData {
  id: string
  title: string
  subtitle: string
  content: string
  details: string[]
  icon: string
  color: string
}

const principlesData: PrincipleData[] = [
  {
    id: 'marxism-leninism',
    title: 'D·ª±a tr√™n n·ªÅn t·∫£ng ch·ªß nghƒ©a M√°c ‚Äì L√™nin',
    subtitle: 'C∆° s·ªü l√Ω lu·∫≠n, kim ch·ªâ nam',
    content: 'M·ªçi t∆∞ t∆∞·ªüng, h√†nh ƒë·ªông ph·∫£i d·ª±a tr√™n n·ªÅn t·∫£ng ch·ªß nghƒ©a M√°c ‚Äì L√™nin, k·∫øt h·ª£p v·ªõi t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh ƒë·ªÉ ƒë·ªãnh h∆∞·ªõng con ƒë∆∞·ªùng ph√°t tri·ªÉn ƒë√∫ng ƒë·∫Øn.',
    details: [
      'C∆° s·ªü l√Ω lu·∫≠n, kim ch·ªâ nam cho m·ªçi ƒë∆∞·ªùng l·ªëi, ch√≠nh s√°ch',
      'K·∫øt h·ª£p v·ªõi t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh',
      'ƒê·ªãnh h∆∞·ªõng con ƒë∆∞·ªùng ph√°t tri·ªÉn ƒë√∫ng ƒë·∫Øn',
      'V·∫≠n d·ª•ng s√°ng t·∫°o v√†o ƒëi·ªÅu ki·ªán Vi·ªát Nam'
    ],
    icon: 'üìñ',
    color: 'from-red-600 to-red-800'
  },
  {
    id: 'independence-socialism',
    title: 'Gi·ªØ v·ªØng ƒë·ªôc l·∫≠p d√¢n t·ªôc',
    subtitle: 'CNXH g·∫Øn v·ªõi ƒë·ªôc l·∫≠p d√¢n t·ªôc',
    content: 'CNXH g·∫Øn v·ªõi ƒë·ªôc l·∫≠p d√¢n t·ªôc l√† ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t c·ªßa c√°ch m·∫°ng Vi·ªát Nam. ƒê·ªôc l·∫≠p d√¢n t·ªôc l√† ti·ªÅn ƒë·ªÅ ƒë·ªÉ ƒëi l√™n CNXH; CNXH l√† con ƒë∆∞·ªùng b·∫£o ƒë·∫£m ƒë·ªôc l·∫≠p d√¢n t·ªôc v·ªØng b·ªÅn.',
    details: [
      'CNXH g·∫Øn v·ªõi ƒë·ªôc l·∫≠p d√¢n t·ªôc l√† ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t',
      'ƒê·ªôc l·∫≠p d√¢n t·ªôc l√† ti·ªÅn ƒë·ªÅ ƒë·ªÉ ƒëi l√™n CNXH',
      'CNXH l√† con ƒë∆∞·ªùng b·∫£o ƒë·∫£m ƒë·ªôc l·∫≠p d√¢n t·ªôc v·ªØng b·ªÅn',
      'Kh√¥ng th·ªÉ t√°ch r·ªùi hai nhi·ªám v·ª• n√†y'
    ],
    icon: 'üõ°Ô∏è',
    color: 'from-blue-600 to-blue-800'
  },
  {
    id: 'solidarity-learning',
    title: 'ƒêo√†n k·∫øt, h·ªçc t·∫≠p kinh nghi·ªám c√°c n∆∞·ªõc anh em',
    subtitle: 'ƒêo√†n k·∫øt qu·ªëc t·∫ø l√† s·ª©c m·∫°nh th·ªùi ƒë·∫°i',
    content: 'ƒêo√†n k·∫øt qu·ªëc t·∫ø l√† s·ª©c m·∫°nh th·ªùi ƒë·∫°i. V·ª´a tranh th·ªß s·ª± gi√∫p ƒë·ª°, v·ª´a ti·∫øp thu kinh nghi·ªám, song ph·∫£i bi·∫øt ch·ªçn l·ªçc ƒë·ªÉ ph√π h·ª£p ƒëi·ªÅu ki·ªán Vi·ªát Nam.',
    details: [
      'ƒêo√†n k·∫øt qu·ªëc t·∫ø l√† s·ª©c m·∫°nh th·ªùi ƒë·∫°i',
      'Tranh th·ªß s·ª± gi√∫p ƒë·ª° t·ª´ c√°c n∆∞·ªõc anh em',
      'Ti·∫øp thu kinh nghi·ªám c√≥ ch·ªçn l·ªçc',
      'Ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán c·ª• th·ªÉ c·ªßa Vi·ªát Nam'
    ],
    icon: 'ü§ù',
    color: 'from-green-600 to-green-800'
  },
  {
    id: 'build-defend',
    title: 'X√¢y ph·∫£i ƒëi ƒë√¥i v·ªõi ch·ªëng',
    subtitle: 'Hai m·∫∑t g·∫Øn b√≥, b·ªï sung cho nhau',
    content: 'X√¢y: b·ªìi ƒë·∫Øp c√°i m·ªõi, t·∫°o ra c∆° s·ªü v·∫≠t ch·∫•t ‚Äì k·ªπ thu·∫≠t, n·ªÅn kinh t·∫ø, vƒÉn h√≥a, con ng∆∞·ªùi c·ªßa CNXH. Ch·ªëng: ƒë·∫•u tranh x√≥a b·ªè t√†n d∆∞ x√£ h·ªôi c≈©. Hai m·∫∑t n√†y g·∫Øn b√≥, b·ªï sung cho nhau.',
    details: [
      'X√¢y: b·ªìi ƒë·∫Øp c√°i m·ªõi, t·∫°o c∆° s·ªü v·∫≠t ch·∫•t ‚Äì k·ªπ thu·∫≠t c·ªßa CNXH',
      'X√¢y: ph√°t tri·ªÉn n·ªÅn kinh t·∫ø, vƒÉn h√≥a, con ng∆∞·ªùi m·ªõi',
      'Ch·ªëng: x√≥a b·ªè t√†n d∆∞ x√£ h·ªôi c≈© (√°p b·ª©c, b·∫•t c√¥ng, quan li√™u...)',
      'Hai m·∫∑t g·∫Øn b√≥, b·ªï sung cho nhau'
    ],
    icon: '‚öîÔ∏è',
    color: 'from-purple-600 to-purple-800'
  }
]

interface PrinciplesSectionProps {
  onNext: () => void
  onBack: () => void
}

export default function PrinciplesSection({ onNext, onBack }: PrinciplesSectionProps) {
  const [currentPrinciple, setCurrentPrinciple] = useState(0)
  const [completedPrinciples, setCompletedPrinciples] = useState<Set<number>>(new Set())

  const nextPrinciple = () => {
    setCompletedPrinciples(prev => new Set([...prev, currentPrinciple]))

    if (currentPrinciple < principlesData.length - 1) {
      setTimeout(() => {
        setCurrentPrinciple(prev => prev + 1)
      }, 500)
    }
  }

  return (
    <div className="h-screen w-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-700 relative overflow-hidden flex flex-col">
      {/* Back Button */}
      <motion.button
        onClick={onBack}
        className="absolute top-8 left-8 z-20 bg-white/90 hover:bg-white text-slate-800 px-6 py-3 rounded-full font-bold shadow-xl transition-all duration-300 flex items-center space-x-2 cursor-pointer hover:scale-105 ease-in-out"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        initial={{ opacity: 0, x: -50 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5 }}
      >
        <span className="text-xl">‚Üê</span>
        <span>Quay l·∫°i</span>
      </motion.button>
      {/* Animated background */}
      <div className="absolute inset-0">
        {/* Grid pattern */}
        <div className="absolute inset-0 opacity-20" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M20 20h20v20H20z'/%3E%3C/g%3E%3C/svg%3E")`
        }} />

        {/* Floating elements */}
        {[...Array(15)].map((_, i) => {
          const x = (i * 23.7) % 100;
          const y = (i * 31.3) % 100;
          const duration = 4 + (i % 3);
          const delay = (i % 6) * 0.33;

          return (
            <motion.div
              key={i}
              className="absolute w-3 h-3 bg-white rounded-full opacity-20"
              style={{
                left: `${x}%`,
                top: `${y}%`,
              }}
              animate={{
                y: [0, -30, 0],
                opacity: [0.2, 0.6, 0.2],
                scale: [1, 1.5, 1],
              }}
              transition={{
                duration: duration,
                repeat: Infinity,
                delay: delay,
              }}
            />
          );
        })}
      </div>

      <div className="relative z-10 flex-1 flex flex-col p-4 md:p-6">
        {/* Header */}
        <motion.div
          className="text-center mb-6"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <h2 className="text-2xl md:text-3xl lg:text-4xl font-bold text-white mb-3">
            Nguy√™n T·∫Øc X√¢y D·ª±ng CNXH Trong Th·ªùi K·ª≥ Qu√° ƒê·ªô
          </h2>
          <p className="text-sm md:text-base text-slate-300 max-w-4xl mx-auto leading-relaxed">
            B·ªën nguy√™n t·∫Øc c·ªët l√µi trong vi·ªác x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi trong th·ªùi k·ª≥ qu√° ƒë·ªô ·ªü Vi·ªát Nam
          </p>
        </motion.div>

        {/* Progress indicator */}
        <motion.div
          className="max-w-2xl mx-auto mb-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
        >
          <div className="flex justify-center space-x-3 mb-2">
            {principlesData.map((_, index) => (
              <motion.div
                key={index}
                className={`w-3 h-3 rounded-full border-2 ${index === currentPrinciple
                  ? 'bg-yellow-400 border-yellow-400'
                  : completedPrinciples.has(index)
                    ? 'bg-green-500 border-green-500'
                    : 'bg-transparent border-white'
                  }`}
                animate={index === currentPrinciple ? {
                  scale: [1, 1.2, 1],
                  boxShadow: [
                    "0 0 0 0 rgba(251, 191, 36, 0.7)",
                    "0 0 0 8px rgba(251, 191, 36, 0)",
                    "0 0 0 0 rgba(251, 191, 36, 0.7)"
                  ]
                } : {}}
                transition={{
                  duration: 1.5,
                  repeat: index === currentPrinciple ? Infinity : 0,
                }}
              />
            ))}
          </div>
          <p className="text-center text-slate-400 text-sm">
            Nguy√™n t·∫Øc {currentPrinciple + 1} / {principlesData.length}
          </p>
        </motion.div>

        {/* Main principle display */}
        <div className="flex-1 flex flex-col max-w-6xl mx-auto">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentPrinciple}
              className="flex-1 flex flex-col gap-4"
              initial={{ opacity: 0, x: 100 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -100 }}
              transition={{ duration: 0.8 }}
            >
              {/* Header Card */}
              <motion.div
                className="bg-white/95 backdrop-blur-lg rounded-2xl p-4 md:p-6 shadow-xl border border-gray-200"
                initial={{ scale: 0.8, y: -20 }}
                animate={{ scale: 1, y: 0 }}
                transition={{ type: "spring", duration: 0.8 }}
              >
                <div className="text-center">
                  {/* Icon */}
                  <motion.div
                    className="text-5xl md:text-6xl mb-4"
                    animate={{
                      rotateY: [0, 360],
                    }}
                    transition={{
                      duration: 20,
                      repeat: Infinity,
                      ease: "linear"
                    }}
                  >
                    {principlesData[currentPrinciple].icon}
                  </motion.div>

                  {/* Title */}
                  <h3 className="text-xl md:text-2xl lg:text-3xl font-bold text-gray-800 mb-3 leading-tight">
                    {principlesData[currentPrinciple].title}
                  </h3>

                  {/* Subtitle */}
                  <p className="text-base md:text-lg text-gray-600 mb-4 italic font-medium">
                    {principlesData[currentPrinciple].subtitle}
                  </p>

                  {/* Content */}
                  <p className="text-sm md:text-base text-gray-700 leading-relaxed max-w-4xl mx-auto">
                    {principlesData[currentPrinciple].content}
                  </p>
                </div>
              </motion.div>

              {/* Details Card */}
              <motion.div
                className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-4 md:p-6 border border-blue-200 shadow-lg"
                initial={{ scale: 0.8, y: 20 }}
                animate={{ scale: 1, y: 0 }}
                transition={{ type: "spring", duration: 0.8, delay: 0.2 }}
              >
                <h4 className="text-lg md:text-xl font-bold text-blue-800 mb-4 flex items-center justify-center">
                  <span className="mr-3 text-2xl">üìã</span>
                  <span>C√°c ƒëi·ªÉm ch√≠nh</span>
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {principlesData[currentPrinciple].details.map((detail, index) => (
                    <motion.div
                      key={index}
                      className="bg-white rounded-xl p-4 border border-blue-100 shadow-sm hover:shadow-md transition-shadow"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.4 + index * 0.1 }}
                    >
                      <div className="flex items-start space-x-3">
                        <span className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">
                          {index + 1}
                        </span>
                        <span className="text-gray-700 text-sm md:text-base font-medium leading-relaxed">
                          {detail}
                        </span>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </motion.div>

              {/* Action button */}
              <motion.div
                className="flex justify-center mt-2"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.8 }}
              >
                <motion.button
                  onClick={nextPrinciple}
                  className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white px-8 py-3 rounded-full font-bold text-base md:text-lg shadow-lg hover:shadow-xl transition-all"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {currentPrinciple < principlesData.length - 1 ? (
                    <>
                      <span className="mr-2">‚úÖ</span>
                      Nguy√™n t·∫Øc ti·∫øp theo
                    </>
                  ) : (
                    <>
                      <span className="mr-2">üéØ</span>
                      Ho√†n th√†nh t·∫•t c·∫£
                    </>
                  )}
                </motion.button>
              </motion.div>

            </motion.div>
          </AnimatePresence>
        </div>

        {/* Completion message and next button */}
        {completedPrinciples.size === principlesData.length && (
          <motion.div
            className="absolute bottom-4 left-1/2 transform -translate-x-1/2 w-full max-w-4xl px-4"
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1 }}
          >
            <div className="bg-white/95 backdrop-blur-lg rounded-2xl p-4 md:p-6 border border-green-200 shadow-xl mb-4">
              <div className="text-center">
                <motion.div
                  className="text-4xl md:text-5xl mb-3"
                  animate={{ scale: [1, 1.1, 1] }}
                  transition={{ duration: 2, repeat: Infinity }}
                >
                  üéØ
                </motion.div>
                <h3 className="text-xl md:text-2xl font-bold text-green-800 mb-3">
                  ƒê√£ n·∫Øm v·ªØng 4 nguy√™n t·∫Øc c·ªët l√µi!
                </h3>
                <p className="text-gray-700 text-base md:text-lg">
                  B·∫°n ƒë√£ hi·ªÉu r√µ c√°c nguy√™n t·∫Øc x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi ·ªü Vi·ªát Nam.
                </p>
              </div>
            </div>

            <div className="text-center">
              <motion.button
                onClick={onNext}
                className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white px-8 py-4 rounded-full font-bold text-lg shadow-xl hover:shadow-2xl transition-all"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                animate={{
                  boxShadow: [
                    "0 0 20px rgba(251, 146, 60, 0.6)",
                    "0 0 30px rgba(251, 146, 60, 0.8)",
                    "0 0 20px rgba(251, 146, 60, 0.6)"
                  ]
                }}
                transition={{
                  boxShadow: {
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }
                }}
              >
                <span className="mr-2">üöÄ</span>
                Ti·∫øp theo: K·∫øt lu·∫≠n
              </motion.button>
            </div>
          </motion.div>
        )}
      </div>
    </div>
  )
}
