'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface PathData {
  id: string
  title: string
  shortName: string
  description: string
  advantages: string[]
  disadvantages: string[]
  hcmOpinion: string
  color: string
  icon: string
}

// Hai l·ª±a ch·ªçn ban ƒë·∫ßu
const initialPathsData: PathData[] = [
  {
    id: 'capitalism',
    title: 'T∆∞ b·∫£n ch·ªß nghƒ©a',
    shortName: 'TBCN',
    description: 'Ph√°t tri·ªÉn theo m√¥ h√¨nh ph∆∞∆°ng T√¢y, v·ªõi n·ªÅn kinh t·∫ø th·ªã tr∆∞·ªùng t·ª± do, d·ª±a tr√™n s·ªü h·ªØu t∆∞ nh√¢n v√† nh√† n∆∞·ªõc t∆∞ s·∫£n',
    advantages: [
      'Th√∫c ƒë·∫©y nhanh qu√° tr√¨nh c√¥ng nghi·ªáp h√≥a, hi·ªán ƒë·∫°i h√≥a, ph√°t tri·ªÉn l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t',
      'T·∫°o ƒë·ªông l·ª±c c·∫°nh tranh v√† ph√°t tri·ªÉn khoa h·ªçc k·ªπ thu·∫≠t',
      'T·∫°o ra t·∫ßng l·ªõp tr√≠ th·ª©c, c√¥ng nh√¢n m·ªõi, g√≥p ph·∫ßn n√¢ng cao d√¢n tr√≠',
      'T·∫°o c∆° h·ªôi ti·∫øp c·∫≠n v·ªõi c√°c gi√° tr·ªã vƒÉn minh, khoa h·ªçc, k·ªπ thu·∫≠t ph∆∞∆°ng T√¢y'
    ],
    disadvantages: [
      '·ªû Vi·ªát Nam, giai c·∫•p t∆∞ s·∫£n d√¢n t·ªôc nh·ªè b√©, y·∫øu ·ªõt, d·ªÖ b·ªã th·ª±c d√¢n kh·ªëng ch·∫ø',
      'TBCN g·∫Øn li·ªÅn v·ªõi ch·ªß nghƒ©a ƒë·∫ø qu·ªëc x√¢m l∆∞·ª£c, kh√≥ gi·∫£i ph√≥ng tri·ªát ƒë·ªÉ d√¢n t·ªôc thu·ªôc ƒë·ªãa',
      'N·∫øu ƒëi theo con ƒë∆∞·ªùng n√†y, Vi·ªát Nam d·ªÖ r∆°i v√†o l·ªá thu·ªôc m·ªõi',
      'Kh√¥ng ph√π h·ª£p v·ªõi ho√†n c·∫£nh Vi·ªát Nam'
    ],
    hcmOpinion: 'D·ª±a v√†o t∆∞ s·∫£n m√† c·ª©u n∆∞·ªõc th√¨ ch·∫≥ng kh√°c n√†o r∆∞·ªõc h·ªï v·ªÅ nh√†. Con ƒë∆∞·ªùng n√†y kh√¥ng ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán Vi·ªát Nam.',
    color: 'from-blue-600 to-blue-800',
    icon: 'üè≠'
  },
  {
    id: 'socialism',
    title: 'Ch·ªß nghƒ©a x√£ h·ªôi',
    shortName: 'CNXH',
    description: 'X√¢y d·ª±ng ch·∫ø ƒë·ªô c√¥ng h·ªØu, nh√¢n d√¢n lao ƒë·ªông l√†m ch·ªß, do giai c·∫•p c√¥ng nh√¢n l√£nh ƒë·∫°o theo t∆∞ t∆∞·ªüng M√°c-L√™nin',
    advantages: [
      'Gi·∫£i quy·∫øt tri·ªát ƒë·ªÉ m√¢u thu·∫´n d√¢n t·ªôc v√† m√¢u thu·∫´n giai c·∫•p',
      'ƒê·∫∑t l·ª£i √≠ch c·ªßa nh√¢n d√¢n lao ƒë·ªông l√™n h√†ng ƒë·∫ßu, th·ª±c hi·ªán d√¢n ch·ªß r·ªông r√£i',
      'C√≥ s·ª± ·ªßng h·ªô c·ªßa phong tr√†o c·ªông s·∫£n v√† c√¥ng nh√¢n qu·ªëc t·∫ø',
      'Kh√¥ng ch·ªâ gi√†nh ƒë·ªôc l·∫≠p m√† c√≤n mang l·∫°i t·ª± do, h·∫°nh ph√∫c th·∫≠t s·ª± cho nh√¢n d√¢n'
    ],
    disadvantages: [
      'Qu√° tr√¨nh x√¢y d·ª±ng CNXH r·∫•t kh√≥ khƒÉn, ph·ª©c t·∫°p',
      'Ch∆∞a c√≥ ti·ªÅn l·ªá th√†nh c√¥ng ·ªü m·ªôt n∆∞·ªõc thu·ªôc ƒë·ªãa n√¥ng nghi·ªáp nh∆∞ Vi·ªát Nam',
      'ƒê√≤i h·ªèi s·ª± ki√™n tr√¨, b·∫£n lƒ©nh ch√≠nh tr·ªã cao',
      'Ph·∫£i v·ª´a h·ªçc h·ªèi, v·ª´a th·ª≠ nghi·ªám, d·ªÖ v·∫•p ph·∫£i sai l·∫ßm'
    ],
    hcmOpinion: 'Mu·ªën c·ª©u n∆∞·ªõc v√† gi·∫£i ph√≥ng d√¢n t·ªôc, kh√¥ng c√≥ con ƒë∆∞·ªùng n√†o kh√°c con ƒë∆∞·ªùng c√°ch m·∫°ng v√¥ s·∫£n. ƒê√¢y l√† con ƒë∆∞·ªùng ƒë√∫ng ƒë·∫Øn nh·∫•t.',
    color: 'from-red-600 to-red-800',
    icon: '‚öñÔ∏è'
  }
]

// Con ƒë∆∞·ªùng qu√° ƒë·ªô - hi·ªÉn th·ªã sau khi ho√†n th√†nh 2 l·ª±a ch·ªçn
const transitionPath: PathData = {
  id: 'transition-socialism',
  title: 'Qu√° ƒë·ªô l√™n CNXH ·ªü Vi·ªát Nam',
  shortName: 'Qu√° ƒë·ªô CNXH',
  description: 'B∆∞·ªõc chuy·ªÉn ƒë·∫∑c th√π ‚Äì t·ª´ m·ªôt n∆∞·ªõc thu·ªôc ƒë·ªãa, n√¥ng nghi·ªáp l·∫°c h·∫≠u ti·∫øn th·∫≥ng l√™n CNXH, kh√¥ng qua giai ƒëo·∫°n ph√°t tri·ªÉn t∆∞ b·∫£n ch·ªß nghƒ©a',
  advantages: [
    'Tr√°nh l·ªá thu·ªôc v√†o ngo·∫°i bang v√† kh√¥ng r∆°i v√†o con ƒë∆∞·ªùng ph√°t tri·ªÉn t∆∞ b·∫£n ch·ªß nghƒ©a ƒë·∫ßy r·ªßi ro',
    'Ph√π h·ª£p v·ªõi ho√†n c·∫£nh Vi·ªát Nam: d√¢n t·ªôc ch·ªß y·∫øu l√† n√¥ng d√¢n, khao kh√°t ru·ªông ƒë·∫•t v√† t·ª± do',
    'Cho ph√©p k·∫øt h·ª£p gi·ªØa x√¢y d·ª±ng ch√≠nh tr·ªã ƒë·ªôc l·∫≠p v√† c·∫£i bi·∫øn x√£ h·ªôi theo h∆∞·ªõng ti·∫øn b·ªô',
    'Ti·∫øn h√†nh ƒë·ªìng th·ªùi kh√°ng chi·∫øn v√† ki·∫øn qu·ªëc'
  ],
  disadvantages: [
    'L√† con ƒë∆∞·ªùng d√†i l√¢u, ph·ª©c t·∫°p, ph·∫£i v·ª´a h·ªçc h·ªèi, v·ª´a th·ª≠ nghi·ªám',
    'D·ªÖ v·∫•p ph·∫£i sai l·∫ßm do ch∆∞a c√≥ ti·ªÅn l·ªá r√µ r√†ng',
    'ƒê√≤i h·ªèi s·ª± ki√™n tr√¨, b·∫£n lƒ©nh ch√≠nh tr·ªã v√† s·ª± l√£nh ƒë·∫°o ƒë√∫ng ƒë·∫Øn',
    'Ph·∫£i ƒë·ªëi m·∫∑t v·ªõi nhi·ªÅu th√°ch th·ª©c trong qu√° tr√¨nh th·ª±c hi·ªán'
  ],
  hcmOpinion: 'Con ƒë∆∞·ªùng c√°ch m·∫°ng v√¥ s·∫£n l√† con ƒë∆∞·ªùng t·∫•t y·∫øu c·ªßa d√¢n t·ªôc ta. ƒê√¢y ch√≠nh l√† s√°ng t·∫°o l·ªõn nh·∫•t, ph√π h·ª£p nh·∫•t v·ªõi ƒë·∫∑c ƒëi·ªÉm l·ªãch s·ª≠ v√† x√£ h·ªôi Vi·ªát Nam.',
  color: 'from-green-600 to-green-800',
  icon: 'üå±'
}

interface TwoPathsSectionProps {
  onNext: () => void
  onBack: () => void
}

export default function TwoPathsSection({ onNext, onBack }: TwoPathsSectionProps) {
  const [selectedPath, setSelectedPath] = useState<string | null>(null)
  const [exploredPaths, setExploredPaths] = useState<Set<string>>(new Set())
  const [showTransition, setShowTransition] = useState(false)
  const [showThirdPath, setShowThirdPath] = useState(false)
  const [showNextButton, setShowNextButton] = useState(false)

  const handlePathClick = (pathId: string) => {
    setSelectedPath(pathId)
    const newExploredPaths = new Set(exploredPaths)
    newExploredPaths.add(pathId)
    setExploredPaths(newExploredPaths)
  }

  const handleModalClose = () => {
    setSelectedPath(null)

    // Check if both initial paths have been explored
    if (exploredPaths.size === 2 && !showThirdPath) {
      setTimeout(() => {
        setShowTransition(true)
        setTimeout(() => {
          setShowThirdPath(true)
          setTimeout(() => setShowNextButton(true), 1500)
        }, 800)
      }, 300)
    }
  }

  return (
    <div className="h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-700 relative overflow-hidden flex flex-col">
      {/* Back Button */}
      <motion.button
        onClick={onBack}
        className="absolute top-8 left-8 z-20 bg-white/90 hover:bg-white text-gray-800 px-6 py-3 rounded-full font-bold shadow-xl transition-all duration-300 flex items-center space-x-2 cursor-pointer hover:scale-105 ease-in-out"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        initial={{ opacity: 0, x: -50 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.5 }}
      >
        <span className="text-xl">‚Üê</span>
        <span>Quay l·∫°i</span>
      </motion.button>
      {/* Background pattern */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M30 30c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
        }} />
      </div>

      <div className="relative z-10 p-8 flex-1 flex flex-col">
        {/* Title */}
        <motion.div
          className="text-center mb-8"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
            Hai L·ª±a Ch·ªçn Tr∆∞·ªõc D√¢n T·ªôc
          </h2>
          <p className="text-base text-gray-300 max-w-4xl mx-auto mb-4">
            ƒê·∫ßu th·∫ø k·ª∑ XX, d√¢n t·ªôc Vi·ªát Nam ƒë·ª©ng tr∆∞·ªõc hai kh·∫£ nƒÉng l·ª±a ch·ªçn con ƒë∆∞·ªùng ph√°t tri·ªÉn
          </p>
          {exploredPaths.size < 2 && (
            <motion.p
              className="text-yellow-400 font-semibold text-sm"
              animate={{ opacity: [0.5, 1, 0.5] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              üîç H√£y kh√°m ph√° t·ª´ng l·ª±a ch·ªçn ƒë·ªÉ hi·ªÉu r√µ h∆°n ({exploredPaths.size}/2 ƒë√£ kh√°m ph√°)
            </motion.p>
          )}
          {exploredPaths.size === 2 && !showTransition && (
            <motion.p
              className="text-green-400 font-semibold text-sm"
              animate={{ opacity: [0.7, 1, 0.7] }}
              transition={{ duration: 1.5, repeat: Infinity }}
            >
              ‚úÖ ƒê√£ kh√°m ph√° xong! Ch·ªù ƒë·ªÉ xem l·ª±a ch·ªçn c·ªßa H·ªì Ch√≠ Minh...
            </motion.p>
          )}
        </motion.div>

        {/* Fork in the road visualization */}
        {/* <div className="flex justify-center mb-16">
          <svg width="400" height="200" className="text-gray-400">
            <motion.path
              d="M 200 200 L 200 100 L 100 50"
              stroke="currentColor"
              strokeWidth="4"
              fill="none"
              initial={{ pathLength: 0 }}
              animate={{ pathLength: 1 }}
              transition={{ duration: 2, delay: 0.5 }}
            />
            <motion.path
              d="M 200 100 L 300 50"
              stroke="currentColor"
              strokeWidth="4"
              fill="none"
              initial={{ pathLength: 0 }}
              animate={{ pathLength: 1 }}
              transition={{ duration: 2, delay: 1 }}
            />
          </svg>
        </div> */}

        {/* Path cards */}
        <div className="flex-1 flex items-center justify-center relative">
          {!showThirdPath ? (
            // Initial two paths
            <div className="grid md:grid-cols-2 gap-12 max-w-5xl mx-auto">
              {initialPathsData.map((path, index) => {
                const isExplored = exploredPaths.has(path.id)
                return (
                  <motion.div
                    key={path.id}
                    className="relative"
                    initial={{ opacity: 0, x: index === 0 ? -100 : 100 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 1, delay: 1 + index * 0.5 }}
                  >
                    {/* Exploration badge */}
                    {isExplored && (
                      <motion.div
                        className="absolute -top-3 -right-3 z-10 bg-green-500 text-white rounded-full w-12 h-12 flex items-center justify-center font-bold text-xl shadow-lg"
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ type: "spring", delay: 0.2 }}
                      >
                        ‚úì
                      </motion.div>
                    )}

                    <motion.div
                      className={`bg-gradient-to-br ${path.color} rounded-2xl p-6 cursor-pointer shadow-2xl border-4 ${isExplored ? 'border-green-400 shadow-green-400/50' : 'border-white/20 hover:border-white/40'} h-[350px] relative overflow-hidden transition-all duration-300`}
                      whileHover={{ scale: 1.05, rotateY: 5 }}
                      onClick={() => handlePathClick(path.id)}
                      animate={isExplored ? {
                        boxShadow: [
                          "0 0 20px rgba(34, 197, 94, 0.3)",
                          "0 0 40px rgba(34, 197, 94, 0.5)",
                          "0 0 20px rgba(34, 197, 94, 0.3)"
                        ]
                      } : {}}
                      transition={{
                        boxShadow: {
                          duration: 2,
                          repeat: Infinity,
                          ease: "easeInOut"
                        }
                      }}
                    >
                      <div className="text-center mb-4">
                        <div className="text-6xl mb-4">{path.icon}</div>
                        <h3 className="text-2xl font-bold text-white mb-2">
                          {path.title}
                        </h3>
                        <p className="text-sm text-white font-semibold mb-3">
                          ({path.shortName})
                        </p>
                        <p className="text-white/90 text-sm leading-relaxed px-2">
                          {path.description}
                        </p>
                      </div>

                      <motion.div
                        className="text-center"
                        whileHover={{ scale: 1.1 }}
                      >
                        <div className={`${isExplored ? 'bg-green-500/40 border-2 border-green-400' : 'bg-white/20 border-2 border-white/30'} rounded-xl py-3 px-6 inline-block transition-all duration-300 hover:scale-105`}>
                          <span className="text-white font-bold text-sm">
                            {isExplored ? '‚úÖ ƒê√£ m·ªü kh√≥a - Xem l·∫°i' : 'üîí Nh·∫•p ƒë·ªÉ m·ªü kh√≥a'}
                          </span>
                        </div>
                      </motion.div>
                    </motion.div>
                  </motion.div>
                )
              })}
            </div>
          ) : (
            // Show transition to third path
            <div className="w-full h-full flex flex-col items-center justify-center relative">
              {/* Compact explored paths */}
              <AnimatePresence>
                {showTransition && (
                  <motion.div
                    className="flex justify-center items-center gap-20 mb-8 relative"
                    initial={{ opacity: 1, y: 0 }}
                    animate={{ opacity: 0.6, y: -80, scale: 0.8 }}
                    transition={{ duration: 1 }}
                  >
                    {initialPathsData.map((path, index) => (
                      <motion.div
                        key={path.id}
                        className="relative"
                        initial={{ scale: 1, y: 0 }}
                        animate={{ scale: 0.6, y: 0 }}
                        transition={{ duration: 0.8, delay: index * 0.1 }}
                      >
                        <motion.div
                          className={`bg-gradient-to-br ${path.color} rounded-xl p-2 shadow-lg border-2 border-green-400 w-24 h-16 cursor-pointer opacity-80`}
                          whileHover={{ scale: 0.65 }}
                          onClick={() => handlePathClick(path.id)}
                        >
                          <div className="text-center">
                            <div className="text-sm mb-1">{path.icon}</div>
                            <h4 className="text-xs font-bold text-white">
                              {path.shortName}
                            </h4>
                          </div>
                        </motion.div>
                        <div className="absolute -top-1 -right-1 bg-green-500 text-white rounded-full w-4 h-4 flex items-center justify-center font-bold text-xs">
                          ‚úì
                        </div>
                      </motion.div>
                    ))}
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Third path reveal */}
              <AnimatePresence>
                {showThirdPath && (
                  <motion.div
                    className="w-full max-w-3xl mx-auto"
                    initial={{ opacity: 0, y: 150, scale: 0.5, rotateX: -90 }}
                    animate={{ opacity: 1, y: 0, scale: 1, rotateX: 0 }}
                    transition={{
                      duration: 1.2,
                      type: "spring",
                      stiffness: 100,
                      damping: 15
                    }}
                  >
                    <motion.div
                      className={`bg-gradient-to-br ${transitionPath.color} rounded-2xl p-8 shadow-2xl border-4 border-yellow-400 relative overflow-hidden cursor-pointer`}
                      whileHover={{ scale: 1.02 }}
                      onClick={() => handlePathClick(transitionPath.id)}
                      animate={{
                        boxShadow: [
                          "0 0 30px rgba(255, 215, 0, 0.3)",
                          "0 0 50px rgba(255, 215, 0, 0.6)",
                          "0 0 30px rgba(255, 215, 0, 0.3)"
                        ]
                      }}
                      transition={{
                        boxShadow: {
                          duration: 2,
                          repeat: Infinity,
                          ease: "easeInOut"
                        }
                      }}
                    >
                      {/* Special badge */}
                      <motion.div
                        className="absolute top-4 right-4 bg-yellow-400 text-gray-800 rounded-full px-4 py-2 font-bold text-sm"
                        initial={{ scale: 0, rotate: -180 }}
                        animate={{ scale: 1, rotate: 0 }}
                        transition={{ delay: 0.5, type: "spring", stiffness: 200 }}
                      >
                        üéØ L·ª±a ch·ªçn c·ªßa HCM
                      </motion.div>

                      <div className="text-center mb-6">
                        <motion.div
                          className="text-7xl mb-4"
                          initial={{ scale: 0, rotate: 180 }}
                          animate={{ scale: 1, rotate: 0 }}
                          transition={{ delay: 0.2, type: "spring", stiffness: 150 }}
                        >
                          {transitionPath.icon}
                        </motion.div>
                        <motion.h3
                          className="text-3xl font-bold text-white mb-3"
                          initial={{ opacity: 0, y: 30 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: 0.4, duration: 0.8 }}
                        >
                          {transitionPath.title}
                        </motion.h3>
                        <motion.p
                          className="text-white/90 text-lg leading-relaxed"
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: 0.6, duration: 0.8 }}
                        >
                          {transitionPath.description}
                        </motion.p>
                      </div>

                      <motion.div
                        className="text-center"
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: 0.8, duration: 0.6 }}
                      >
                        <motion.div
                          className="bg-yellow-400/20 border-2 border-yellow-400 rounded-xl py-4 px-6 inline-block cursor-pointer transition-all duration-300"
                          whileHover={{ scale: 1.05, backgroundColor: "rgba(255, 215, 0, 0.3)" }}
                          whileTap={{ scale: 0.95 }}
                          animate={{
                            borderColor: ["#facc15", "#fbbf24", "#facc15"],
                          }}
                          transition={{
                            borderColor: {
                              duration: 2,
                              repeat: Infinity,
                              ease: "easeInOut"
                            }
                          }}
                        >
                          <span className="text-white font-bold text-lg">
                            üîì Nh·∫•p ƒë·ªÉ kh√°m ph√° s√°ng t·∫°o c·ªßa H·ªì Ch√≠ Minh
                          </span>
                        </motion.div>
                      </motion.div>
                    </motion.div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          )}
        </div>

        {/* Detailed view modal */}
        <AnimatePresence>
          {selectedPath && (
            <motion.div
              className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={handleModalClose}
            >
              <motion.div
                className="bg-white rounded-2xl p-8 max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
                initial={{ scale: 0.5, opacity: 0, rotateX: -90 }}
                animate={{ scale: 1, opacity: 1, rotateX: 0 }}
                exit={{ scale: 0.5, opacity: 0, rotateX: 90 }}
                transition={{ type: "spring", duration: 0.8 }}
                onClick={(e) => e.stopPropagation()}
              >
                {[...initialPathsData, transitionPath]
                  .filter(path => path.id === selectedPath)
                  .map(path => (
                    <div key={path.id}>
                      <div className="text-center mb-8">
                        <div className="text-8xl mb-4">{path.icon}</div>
                        <h3 className="text-4xl font-bold text-gray-800 mb-4">
                          {path.title}
                        </h3>
                        <p className="text-gray-600 text-xl">
                          {path.description}
                        </p>
                      </div>

                      <div className="grid md:grid-cols-2 gap-8 mb-8">
                        {/* Advantages */}
                        <div>
                          <h4 className="text-2xl font-bold text-green-700 mb-4 flex items-center">
                            <span className="mr-2">‚úÖ</span> ∆Øu ƒëi·ªÉm
                          </h4>
                          <ul className="space-y-3">
                            {path.advantages.map((advantage, index) => (
                              <motion.li
                                key={index}
                                className="flex items-start space-x-3 text-gray-700"
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.1 }}
                              >
                                <span className="text-green-600 text-xl">‚Ä¢</span>
                                <span>{advantage}</span>
                              </motion.li>
                            ))}
                          </ul>
                        </div>

                        {/* Disadvantages */}
                        <div>
                          <h4 className="text-2xl font-bold text-red-700 mb-4 flex items-center">
                            <span className="mr-2">‚ùå</span> Nh∆∞·ª£c ƒëi·ªÉm
                          </h4>
                          <ul className="space-y-3">
                            {path.disadvantages.map((disadvantage, index) => (
                              <motion.li
                                key={index}
                                className="flex items-start space-x-3 text-gray-700"
                                initial={{ opacity: 0, x: 20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.1 }}
                              >
                                <span className="text-red-600 text-xl">‚Ä¢</span>
                                <span>{disadvantage}</span>
                              </motion.li>
                            ))}
                          </ul>
                        </div>
                      </div>

                      {/* HCM Opinion */}
                      <div className="bg-yellow-50 border-l-4 border-yellow-400 p-6 mb-8">
                        <h4 className="text-2xl font-bold text-yellow-800 mb-3 flex items-center">
                          <span className="mr-2">üí≠</span> Quan ƒëi·ªÉm H·ªì Ch√≠ Minh
                        </h4>
                        <p className="text-yellow-900 text-lg italic">
                          &quot;{path.hcmOpinion}&quot;
                        </p>
                      </div>

                      <div className="text-center">
                        <button
                          onClick={handleModalClose}
                          className="bg-gray-600 hover:bg-gray-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors mr-4 cursor-pointer"
                        >
                          ƒê√≥ng
                        </button>
                      </div>
                    </div>
                  ))}
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>


        {/* Next button */}
        {
          showNextButton && (
            <motion.div
              className="fixed bottom-8 right-8"
              initial={{ opacity: 0, scale: 0 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
            >
              <motion.button
                onClick={onNext}
                className="bg-orange-600 hover:bg-orange-700 text-white px-8 py-4 rounded-full font-bold text-lg shadow-2xl cursor-pointer"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
                animate={{
                  boxShadow: [
                    "0 10px 30px rgba(234, 88, 12, 0.3)",
                    "0 15px 40px rgba(234, 88, 12, 0.5)",
                    "0 10px 30px rgba(234, 88, 12, 0.3)"
                  ]
                }}
                transition={{
                  boxShadow: {
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }
                }}
              >
                Ti·∫øp theo: Qu√° tr√¨nh th·ª±c hi·ªán ‚Üí
              </motion.button>
            </motion.div>
          )
        }
      </div >
    </div >
  )
}
